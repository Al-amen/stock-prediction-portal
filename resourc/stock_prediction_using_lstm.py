# -*- coding: utf-8 -*-
"""stock-prediction-using-LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18uIcvCMvwhYNHc_Ft8z7RghsxrNyJAMP
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
from datetime import datetime

# 1.Data Collection

now = datetime.now()

start = datetime(now.year-10,now.month,now.day)
end = now
ticker = 'AAPL'
df = yf.download(ticker,start,end)
df

df.head()

df.tail()

"""**2.Data Exploration & Visualization text**"""

type(df)

df.shape

df.isna().sum()

df.describe()

df.dtypes

df.head()

df = df.reset_index()
df

plt.figure(figsize=(12,5))
plt.plot(df.Close)
plt.title(ticker)
plt.xlabel('Days')
plt.ylabel('Close price')
plt.show()

"""**3.Feature Engineering**"""

#10,20,30,40,60,70,80,90,100
#MA of 5 days ==> nul nul nul null 30 40

temp_df = [10,20,30,40,60,70,80,90,100]
print(sum(temp_df[1:6])/5)

df1 = pd.DataFrame([10,20,30,40,60,70,80,90,100])
df1

df1['MA_5'] = df1.rolling(5).mean()
df1

"""**100 Days Moving Average**"""

df['MA_100'] = df['Close'].rolling(100).mean()
df.head()

df.head(104)

plt.figure(figsize=(12,5))
plt.plot(df['Close'])
plt.plot(df['MA_100'])
plt.title('100 days moving Average')
plt.xlabel('Days')
plt.ylabel('Close price')
plt.show()

"""**200 Days Moving Average**"""

df['MA_200'] = df['Close'].rolling(200).mean()
df.head(210)

plt.figure(figsize=(12,5))
plt.plot(df['Close'])
plt.plot(df['MA_100'],'r')
plt.plot(df['MA_200'],'g')
plt.title('100 days moving Average')
plt.xlabel('Days')
plt.ylabel('Close price')
plt.show()

df

"""**##Calculating % changed in each trading session**"""

df['Percentage Changed'] = df['Close'].pct_change()
df[['Close', 'Percentage Changed']]

plt.figure(figsize=(12,5))
plt.plot(df['Percentage Changed'])
plt.title('Percentage Changed')
plt.xlabel('Days')
plt.ylabel('Percentage Changed')
plt.show()

"""**4. Data Preprocessing**"""

df.shape

# spliting data into traning and testing dataset
data_traing = pd.DataFrame(df['Close'][0:int(len(df)*0.70)])
#data_traing = pd.DataFrame(df.Close[0:int(len(df)*70)])
data_testing = pd.DataFrame(df['Close'][int(len(df)*0.70):])
print(data_traing)
print(data_testing)

data_traing

data_testing

"""# Scalling the data between 0 and 1"""

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0,1))

data_traing_array = scaler.fit_transform(data_traing)
data_traing_array

type(data_traing_array)

data_traing_array.shape

"""# 5.Sequence Creation"""

# 12, 15,10,14,16,18,19,20,21,20

x_train = []
y_train = []

for i in range(100,data_traing_array.shape[0]):
    x_train.append(data_traing_array[i-100:i])
    y_train.append(data_traing_array[i,0])


x_train,y_train = np.array(x_train),np.array(y_train)

x_train

y_train

x_train.shape

y_train.shape

x_train.ndim

y_train.ndim

"""#6. Model Building"""

import tensorflow as tf
print(tf.__version__)

#ML Model
from keras.models import Sequential
from keras.layers import LSTM,Dropout,Input,Dense



model = Sequential()

model.add(Input(shape=(100,1)))
model.add(LSTM(units=128,activation='tanh',return_sequences=True))
model.add(LSTM(units=64))
model.add(Dense(25))
model.add(Dense(1))

"""#8. Model Training"""

model.compile(optimizer='adam',loss='mean_squared_error')
model.fit(x_train,y_train,epochs=50)

model.summary()

#save the trainned mmodel
model.save('stock_prediction_model.keras')

"""#9.Preparing Test Data"""

data_traing.tail(100)

data_testing

past_100_days = data_traing.tail(100)
past_100_days

final_df = pd.concat([past_100_days,data_testing],ignore_index=True)
final_df

input_data = scaler.fit_transform(final_df)
input_data

input_data.shape

x_test = []
y_test = []

for i in range(100,input_data.shape[0]):
    x_test.append(input_data[i-100:i])
    y_test.append(input_data[i,0])

x_test,y_test = np.array(x_test),np.array(y_test)
print(x_test.shape)
print(y_test.shape)

x_test

y_test

x_test.ndim

x_test.size

x_test.shape

y_test.shape

"""#9.Marking Predictions"""

y_predicted=model.predict(x_test)

y_predicted

y_test

y_predicted = scaler.inverse_transform(y_predicted.reshape(-1,1)).flatten()
y_test = scaler.inverse_transform(y_test.reshape(-1,1)).flatten()

y_predicted

y_test

plt.figure(figsize=(12,5))
plt.plot(y_test,'b',label='Original Price')
plt.plot(y_predicted,'r',label='Predicted Price')
plt.xlabel('Days')
plt.ylabel('Price')
plt.title('Original vs Predicted Price')
plt.xlim(450,750)
plt.ylim(150,300)
plt.legend()
plt.show()

"""#Model Evaluation"""

# Mean Squared Error (MSE)
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, y_predicted)
print("Mean Squared Error:", mse)

# Root mean squared Error (RMSE)
rmse = np.sqrt(mse)
print("Root Mean Squared Error:", rmse)

# R-Squared
from sklearn.metrics import r2_score
r2 = r2_score(y_test, y_predicted)
print("R-Squared:", r2)

